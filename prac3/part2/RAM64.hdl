// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=outputA, b=outputB, c=outputC, d=outputD, e=outputE, f=outputF, g=outputG, h=outputH);
    RAM8(in=in, load=outputA, address=address[0..2], out=o1);
    RAM8(in=in, load=outputB, address=address[0..2], out=o2);
    RAM8(in=in, load=outputC, address=address[0..2], out=o3);
    RAM8(in=in, load=outputD, address=address[0..2], out=o4);
    RAM8(in=in, load=outputE, address=address[0..2], out=o5);
    RAM8(in=in, load=outputF, address=address[0..2], out=o6);
    RAM8(in=in, load=outputG, address=address[0..2], out=o7);
    RAM8(in=in, load=outputH, address=address[0..2], out=o8);
    Mux8Way16(a=o1, b=o2, c=o3, d=o4, e=o5, f=o6, g=o7, h=o8, sel=address[3..5], out=out);
}